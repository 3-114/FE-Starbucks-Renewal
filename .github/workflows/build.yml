name: Deploy Next.js to ECR and EC2

on:
  push:
    branches:
      - develop
      - 29-cicd-frontend-배포-자동화

  pull_request:
    branches:
      - develop

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 412381782254.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: 114/starbucks-frontend

jobs:
  deploy:
    name: Build, Push to ECR & Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    env:
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ✅ pnpm 수동 설치 + PATH 보장
      - name: Manually install pnpm and update PATH
        shell: bash
        run: |
          npm install -g pnpm
          echo "PATH=$(npm bin -g):$PATH" >> $GITHUB_ENV
          echo "✅ pnpm 설치 완료 및 PATH 반영"

      # ✅ 설치 확인 (디버깅용)
      - name: Check pnpm version
        run: |
          echo "pnpm path: $(which pnpm)"
          pnpm --version

      - name: Install dependencies & build Next.js
        run: |
          pnpm install
          pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH to EC2 and Deploy Docker Container
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION
          script: |
            echo "▶ ECR에서 Next.js 이미지 Pull 후 컨테이너 실행"

            # ECR 로그인
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin $ECR_REGISTRY

            # 기존 컨테이너 종료 및 삭제
            docker stop nextjs-frontend || true
            docker rm nextjs-frontend || true

            # 최신 이미지 Pull
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # 새 컨테이너 실행
            docker run -d \
              --name nextjs-frontend \
              -p 3000:3000 \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo "✅ Next.js Docker 컨테이너 실행 완료"

            # === EC2 내부 Docker 이미지 정리 ===
            echo "🧹 EC2에 남은 Docker 이미지 중 최신 5개만 남기고 삭제 시작"

            docker images "$ECR_REGISTRY/$ECR_REPOSITORY" --format "{{.Repository}}:{{.Tag}}" \
              | grep -v "<none>" \
              | grep -v "$IMAGE_TAG" \
              | sort -r \
              | tail -n +6 \
              | xargs -r docker rmi

            echo "🧼 EC2 Docker 이미지 정리 완료"